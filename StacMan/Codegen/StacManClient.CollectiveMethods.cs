// <auto-generated>
//     This file was generated by a T4 template.
//     Don't change it directly as your change would get overwritten. Instead, make changes
//     to the .tt file (i.e. the T4 template) and save it to regenerate this file.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace StackExchange.StacMan
{
    public partial class StacManClient : ICollectiveMethods
    {
        /// <summary>
        /// Stack Exchange API Collectives methods
        /// </summary>
        public ICollectiveMethods Collectives
        {
            get { return this; }
        }

        Task<StacManResponse<Collective>> ICollectiveMethods.GetAll(string site, string filter, int? page, int? pagesize, DateTime? fromdate, DateTime? todate)
        {
            ValidateString(site, "site");
            ValidateMinApiVersion("2.3");
            ValidatePaging(page, pagesize);

            var ub = new ApiUrlBuilder(Version, "/collectives", useHttps: false);

            ub.AddParameter("site", site);
            ub.AddParameter("filter", filter);
            ub.AddParameter("page", page);
            ub.AddParameter("pagesize", pagesize);
            ub.AddParameter("fromdate", fromdate);
            ub.AddParameter("todate", todate);

            return CreateApiTask<Collective>(ub, HttpMethod.GET, "/collectives");
        }

        Task<StacManResponse<Collective>> ICollectiveMethods.GetBySlug(string site, IEnumerable<string> slugs, string filter, int? page, int? pagesize, DateTime? fromdate, DateTime? todate)
        {
            ValidateString(site, "site");
            ValidateEnumerable(slugs, "slugs");
            ValidateMinApiVersion("2.3");
            ValidatePaging(page, pagesize);

            var ub = new ApiUrlBuilder(Version, String.Format("/collectives/{0}", String.Join(";", slugs.Select(HttpUtility.UrlEncode))), useHttps: false);

            ub.AddParameter("site", site);
            ub.AddParameter("filter", filter);
            ub.AddParameter("page", page);
            ub.AddParameter("pagesize", pagesize);
            ub.AddParameter("fromdate", fromdate);
            ub.AddParameter("todate", todate);

            return CreateApiTask<Collective>(ub, HttpMethod.GET, "/collectives/{slugs}");
        }

        Task<StacManResponse<Question>> ICollectiveMethods.GetQuestions(string site, IEnumerable<string> slugs, string filter, int? page, int? pagesize, DateTime? fromdate, DateTime? todate, Questions.Sort? sort, DateTime? mindate, DateTime? maxdate, int? min, int? max, Order? order)
        {
            ValidateString(site, "site");
            ValidateEnumerable(slugs, "slugs");
            ValidateMinApiVersion("2.3");
            ValidatePaging(page, pagesize);
            ValidateSortMinMax(sort, mindate: mindate, maxdate: maxdate, min: min, max: max);

            var ub = new ApiUrlBuilder(Version, String.Format("/collectives/{0}/questions", String.Join(";", slugs.Select(HttpUtility.UrlEncode))), useHttps: false);

            ub.AddParameter("site", site);
            ub.AddParameter("filter", filter);
            ub.AddParameter("page", page);
            ub.AddParameter("pagesize", pagesize);
            ub.AddParameter("fromdate", fromdate);
            ub.AddParameter("todate", todate);
            ub.AddParameter("sort", sort);
            ub.AddParameter("min", mindate);
            ub.AddParameter("max", maxdate);
            ub.AddParameter("min", min);
            ub.AddParameter("max", max);
            ub.AddParameter("order", order);

            return CreateApiTask<Question>(ub, HttpMethod.GET, "/collectives/{slugs}/questions");
        }

        Task<StacManResponse<Answer>> ICollectiveMethods.GetAnswers(string site, IEnumerable<string> slugs, string filter, int? page, int? pagesize, DateTime? fromdate, DateTime? todate, Answers.Sort? sort, DateTime? mindate, DateTime? maxdate, int? min, int? max, Order? order)
        {
            ValidateString(site, "site");
            ValidateEnumerable(slugs, "slugs");
            ValidateMinApiVersion("2.3");
            ValidatePaging(page, pagesize);
            ValidateSortMinMax(sort, mindate: mindate, maxdate: maxdate, min: min, max: max);

            var ub = new ApiUrlBuilder(Version, String.Format("/collectives/{0}/answers", String.Join(";", slugs.Select(HttpUtility.UrlEncode))), useHttps: false);

            ub.AddParameter("site", site);
            ub.AddParameter("filter", filter);
            ub.AddParameter("page", page);
            ub.AddParameter("pagesize", pagesize);
            ub.AddParameter("fromdate", fromdate);
            ub.AddParameter("todate", todate);
            ub.AddParameter("sort", sort);
            ub.AddParameter("min", mindate);
            ub.AddParameter("max", maxdate);
            ub.AddParameter("min", min);
            ub.AddParameter("max", max);
            ub.AddParameter("order", order);

            return CreateApiTask<Answer>(ub, HttpMethod.GET, "/collectives/{slugs}/answers");
        }

        Task<StacManResponse<Tag>> ICollectiveMethods.GetTags(string site, IEnumerable<string> slugs, string filter, int? page, int? pagesize, DateTime? fromdate, DateTime? todate, Tags.Sort? sort, int? min, int? max, DateTime? mindate, DateTime? maxdate, string minname, string maxname, Order? order)
        {
            ValidateString(site, "site");
            ValidateEnumerable(slugs, "slugs");
            ValidateMinApiVersion("2.3");
            ValidatePaging(page, pagesize);
            ValidateSortMinMax(sort, min: min, max: max, mindate: mindate, maxdate: maxdate, minname: minname, maxname: maxname);

            var ub = new ApiUrlBuilder(Version, String.Format("/collectives/{0}/tags", String.Join(";", slugs.Select(HttpUtility.UrlEncode))), useHttps: false);

            ub.AddParameter("site", site);
            ub.AddParameter("filter", filter);
            ub.AddParameter("page", page);
            ub.AddParameter("pagesize", pagesize);
            ub.AddParameter("fromdate", fromdate);
            ub.AddParameter("todate", todate);
            ub.AddParameter("sort", sort);
            ub.AddParameter("min", min);
            ub.AddParameter("max", max);
            ub.AddParameter("min", mindate);
            ub.AddParameter("max", maxdate);
            ub.AddParameter("min", minname);
            ub.AddParameter("max", maxname);
            ub.AddParameter("order", order);

            return CreateApiTask<Tag>(ub, HttpMethod.GET, "/collectives/{slugs}/tags");
        }
    }

    /// <summary>
    /// Stack Exchange API Collectives methods
    /// </summary>
    public interface ICollectiveMethods
    {
        /// <summary>
        /// Get all Collectives on the site. (API Method: "/collectives") -- introduced in API version 2.3
        /// </summary>
        Task<StacManResponse<Collective>> GetAll(string site, string filter = null, int? page = null, int? pagesize = null, DateTime? fromdate = null, DateTime? todate = null);

        /// <summary>
        /// Get Collectives identified by a set of slugs. (API Method: "/collectives/{slugs}") -- introduced in API version 2.3
        /// </summary>
        Task<StacManResponse<Collective>> GetBySlug(string site, IEnumerable<string> slugs, string filter = null, int? page = null, int? pagesize = null, DateTime? fromdate = null, DateTime? todate = null);

        /// <summary>
        /// Get Questions associated with Collectives via tags. (API Method: "/collectives/{slugs}/questions") -- introduced in API version 2.3
        /// </summary>
        Task<StacManResponse<Question>> GetQuestions(string site, IEnumerable<string> slugs, string filter = null, int? page = null, int? pagesize = null, DateTime? fromdate = null, DateTime? todate = null, Questions.Sort? sort = null, DateTime? mindate = null, DateTime? maxdate = null, int? min = null, int? max = null, Order? order = null);

        /// <summary>
        /// Get Answers associated with Collectives via tags. (API Method: "/collectives/{slugs}/answers") -- introduced in API version 2.3
        /// </summary>
        Task<StacManResponse<Answer>> GetAnswers(string site, IEnumerable<string> slugs, string filter = null, int? page = null, int? pagesize = null, DateTime? fromdate = null, DateTime? todate = null, Answers.Sort? sort = null, DateTime? mindate = null, DateTime? maxdate = null, int? min = null, int? max = null, Order? order = null);

        /// <summary>
        /// Get Tags associated with Collectives. (API Method: "/collectives/{slugs}/tags") -- introduced in API version 2.3
        /// </summary>
        Task<StacManResponse<Tag>> GetTags(string site, IEnumerable<string> slugs, string filter = null, int? page = null, int? pagesize = null, DateTime? fromdate = null, DateTime? todate = null, Tags.Sort? sort = null, int? min = null, int? max = null, DateTime? mindate = null, DateTime? maxdate = null, string minname = null, string maxname = null, Order? order = null);

    }
}
